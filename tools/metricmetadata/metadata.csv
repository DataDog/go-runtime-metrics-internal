metric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name,curated_metric,sample_tags
runtime.go.metrics.cgo_go_to_c_calls.calls,gauge,,,,Count of calls made from Go to C by the current process.,0,go-runtime-metrics-v2,cgo go to c calls,,
runtime.go.metrics.cpu_classes_gc_mark_assist.cpu_seconds,gauge,,,,"Estimated total CPU time goroutines spent performing GC tasks to assist the GC and prevent it from falling behind the application. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",-1,go-runtime-metrics-v2,cpu gc mark assist,,
runtime.go.metrics.cpu_classes_gc_mark_dedicated.cpu_seconds,gauge,,,,"Estimated total CPU time spent performing GC tasks on processors (as defined by GOMAXPROCS) dedicated to those tasks. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",-1,go-runtime-metrics-v2,cpu gc mark dedicated,,
runtime.go.metrics.cpu_classes_gc_mark_idle.cpu_seconds,gauge,,,,"Estimated total CPU time spent performing GC tasks on spare CPU resources that the Go scheduler could not otherwise find a use for. This should be subtracted from the total GC CPU time to obtain a measure of compulsory GC CPU time. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",-1,go-runtime-metrics-v2,cpu gc mark idle,,
runtime.go.metrics.cpu_classes_gc_pause.cpu_seconds,gauge,,,,"Estimated total CPU time spent with the application paused by the GC. For more information, see: https://pkg.go.dev/runtime/metrics.",-1,go-runtime-metrics-v2,cpu gc pause,,
runtime.go.metrics.cpu_classes_gc_total.cpu_seconds,gauge,,,,"Estimated total CPU time spent performing GC tasks. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes/gc.",-1,go-runtime-metrics-v2,cpu gc total,,
runtime.go.metrics.cpu_classes_idle.cpu_seconds,gauge,,,,"Estimated total available CPU time not spent executing any Go or Go runtime code. In other words, the part of runtime.go.metrics.cpu_classes_total.cpu_seconds that was unused. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",0,go-runtime-metrics-v2,cpu idle,,
runtime.go.metrics.cpu_classes_scavenge_assist.cpu_seconds,gauge,,,,"Estimated total CPU time spent returning unused memory to the underlying platform in response eagerly in response to memory pressure. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",0,go-runtime-metrics-v2,cpu scavenge assist,,
runtime.go.metrics.cpu_classes_scavenge_background.cpu_seconds,gauge,,,,"Estimated total CPU time spent performing background tasks to return unused memory to the underlying platform. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",0,go-runtime-metrics-v2,cpu scavenge background,,
runtime.go.metrics.cpu_classes_scavenge_total.cpu_seconds,gauge,,,,"Estimated total CPU time spent performing tasks that return unused memory to the underlying platform. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes/scavenge.",0,go-runtime-metrics-v2,cpu scavenge total,,
runtime.go.metrics.cpu_classes_total.cpu_seconds,gauge,,,,"Estimated total available CPU time for user Go code or the Go runtime, as defined by GOMAXPROCS. In other words, GOMAXPROCS integrated over the wall-clock duration this process has been executing for. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes.",0,go-runtime-metrics-v2,cpu total,,
runtime.go.metrics.cpu_classes_user.cpu_seconds,gauge,,,,"Estimated total CPU time spent running user Go code. This may also include some small amount of time spent in the Go runtime. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.",0,go-runtime-metrics-v2,cpu user,,
runtime.go.metrics.enabled,gauge,,,,Indicator that runtime metrics collection is enabled (always 1),0,go-runtime-metrics-v2,enabled,,
runtime.go.metrics.gc_cycles_automatic.gc_cycles,gauge,,,,Count of completed GC cycles generated by the Go runtime.,0,go-runtime-metrics-v2,gc cycles auto,,
runtime.go.metrics.gc_cycles_forced.gc_cycles,gauge,,,,Count of completed GC cycles forced by the application.,0,go-runtime-metrics-v2,gc cycles forced,,
runtime.go.metrics.gc_cycles_total.gc_cycles,gauge,,,,Count of all completed GC cycles.,0,go-runtime-metrics-v2,gc cycles total,,
runtime.go.metrics.gc_gogc.percent,gauge,,percent,,"Heap size target percentage configured by the user, otherwise 100. This value is set by the GOGC environment variable, and the runtime/debug.SetGCPercent function.",0,go-runtime-metrics-v2,gc gogc,,
runtime.go.metrics.gc_gomemlimit.bytes,gauge,,byte,,"Go runtime memory limit configured by the user, otherwise math.MaxInt64. This value is set by the GOMEMLIMIT environment variable, and the runtime/debug.SetMemoryLimit function.",0,go-runtime-metrics-v2,gc gomemlimit,,
runtime.go.metrics.gc_heap_allocs.bytes,gauge,,byte,,Cumulative sum of memory allocated to the heap by the application.,0,go-runtime-metrics-v2,gc heap allocs,,
runtime.go.metrics.gc_heap_allocs.objects,gauge,,object,,"Cumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,gc heap allocs,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes,distribution,,byte,,"Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,gc heap allocs by size,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes.avg,gauge,,byte,,"(Average) Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,avg gc heap allocs by size,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes.max,gauge,,byte,,"(Maximum) Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,max gc heap allocs by size,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes.median,gauge,,byte,,"(Median) Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,median gc heap allocs by size,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes.min,gauge,,byte,,"(Minimum) Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,min gc heap allocs by size,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes.p95,gauge,,byte,,"(95th percentile) Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,p95 gc heap allocs by size,,
runtime.go.metrics.gc_heap_allocs_by_size.bytes.p99,gauge,,byte,,"(99th percentile) Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,p99 gc heap allocs by size,,
runtime.go.metrics.gc_heap_frees.bytes,gauge,,byte,,Cumulative sum of heap memory freed by the garbage collector.,0,go-runtime-metrics-v2,gc heap frees,,
runtime.go.metrics.gc_heap_frees.objects,gauge,,object,,"Cumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,gc heap frees,,
runtime.go.metrics.gc_heap_frees_by_size.bytes,distribution,,byte,,"Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,gc heap frees by size,,
runtime.go.metrics.gc_heap_frees_by_size.bytes.avg,gauge,,byte,,"(Average) Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,avg gc heap frees by size,,
runtime.go.metrics.gc_heap_frees_by_size.bytes.max,gauge,,byte,,"(Maximum) Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,max gc heap frees by size,,
runtime.go.metrics.gc_heap_frees_by_size.bytes.median,gauge,,byte,,"(Median) Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,median gc heap frees by size,,
runtime.go.metrics.gc_heap_frees_by_size.bytes.min,gauge,,byte,,"(Minimum) Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,min gc heap frees by size,,
runtime.go.metrics.gc_heap_frees_by_size.bytes.p95,gauge,,byte,,"(95th percentile) Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,p95 gc heap frees by size,,
runtime.go.metrics.gc_heap_frees_by_size.bytes.p99,gauge,,byte,,"(99th percentile) Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by runtime.go.metrics.gc_heap_tiny_allocs.objects, only tiny blocks.",0,go-runtime-metrics-v2,p99 gc heap frees by size,,
runtime.go.metrics.gc_heap_goal.bytes,gauge,,byte,,Heap size target for the end of the GC cycle.,0,go-runtime-metrics-v2,gc heap goal,,
runtime.go.metrics.gc_heap_live.bytes,gauge,,byte,,Heap memory occupied by live objects that were marked by the previous GC.,0,go-runtime-metrics-v2,gc heap live,,
runtime.go.metrics.gc_heap_objects.objects,gauge,,object,,"Number of objects, live or unswept, occupying heap memory.",0,go-runtime-metrics-v2,gc heap objects,,
runtime.go.metrics.gc_heap_tiny_allocs.objects,gauge,,object,,"Count of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.",0,go-runtime-metrics-v2,gc heap tiny allocs,,
runtime.go.metrics.gc_limiter_last_enabled.gc_cycle,gauge,,,,"GC cycle the last time the GC CPU limiter was enabled. This metric is useful for diagnosing the root cause of an out-of-memory error, because the limiter trades memory for CPU time when the GC's CPU time gets too high. This is most likely to occur with use of SetMemoryLimit. The first GC cycle is cycle 1, so a value of 0 indicates that it was never enabled.",0,go-runtime-metrics-v2,gc limiter last enabled,,
runtime.go.metrics.gc_pauses.seconds,distribution,,second,,Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,gc pauses,,
runtime.go.metrics.gc_pauses.seconds.avg,gauge,,second,,(Average) Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,avg gc pauses,,
runtime.go.metrics.gc_pauses.seconds.max,gauge,,second,,(Maximum) Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,max gc pauses,,
runtime.go.metrics.gc_pauses.seconds.median,gauge,,second,,(Median) Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,median gc pauses,,
runtime.go.metrics.gc_pauses.seconds.min,gauge,,second,,(Minimum) Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,min gc pauses,,
runtime.go.metrics.gc_pauses.seconds.p95,gauge,,second,,(95th percentile) Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,p95 gc pauses,,
runtime.go.metrics.gc_pauses.seconds.p99,gauge,,second,,(99th percentile) Deprecated. Prefer the identical runtime.go.metrics.sched_pauses_total_gc.seconds.,-1,go-runtime-metrics-v2,p99 gc pauses,,
runtime.go.metrics.gc_scan_globals.bytes,gauge,,byte,,The total amount of global variable space that is scannable.,0,go-runtime-metrics-v2,gc scan globals,,
runtime.go.metrics.gc_scan_heap.bytes,gauge,,byte,,The total amount of heap space that is scannable.,0,go-runtime-metrics-v2,gc scan heap,,
runtime.go.metrics.gc_scan_stack.bytes,gauge,,byte,,The number of bytes of stack that were scanned last GC cycle.,0,go-runtime-metrics-v2,gc scan stack,,
runtime.go.metrics.gc_scan_total.bytes,gauge,,byte,,The total amount space that is scannable. Sum of all metrics in /gc/scan.,0,go-runtime-metrics-v2,gc scan total,,
runtime.go.metrics.gc_stack_starting_size.bytes,gauge,,byte,,The stack size of new goroutines.,0,go-runtime-metrics-v2,gc stack starting size,,
runtime.go.metrics.memory_classes_heap_free.bytes,gauge,,byte,,"Memory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime's estimate of free address space that is backed by physical memory.",0,go-runtime-metrics-v2,memory heap free,,
runtime.go.metrics.memory_classes_heap_objects.bytes,gauge,,byte,,Memory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.,0,go-runtime-metrics-v2,memory heap objects,,
runtime.go.metrics.memory_classes_heap_released.bytes,gauge,,byte,,"Memory that is completely free and has been returned to the underlying system. This metric is the runtime's estimate of free address space that is still mapped into the process, but is not backed by physical memory.",0,go-runtime-metrics-v2,memory heap released,,
runtime.go.metrics.memory_classes_heap_stacks.bytes,gauge,,byte,,"Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use. Currently, this represents all stack memory for goroutines. It also includes all OS thread stacks in non-cgo programs. Note that stacks may be allocated differently in the future, and this may change.",0,go-runtime-metrics-v2,memory heap stacks,,
runtime.go.metrics.memory_classes_heap_unused.bytes,gauge,,byte,,Memory that is reserved for heap objects but is not currently used to hold heap objects.,0,go-runtime-metrics-v2,memory heap unused,,
runtime.go.metrics.memory_classes_metadata_mcache_free.bytes,gauge,,byte,,"Memory that is reserved for runtime mcache structures, but not in-use.",0,go-runtime-metrics-v2,memory metadata mcache free,,
runtime.go.metrics.memory_classes_metadata_mcache_inuse.bytes,gauge,,byte,,Memory that is occupied by runtime mcache structures that are currently being used.,0,go-runtime-metrics-v2,memory metadata mcache inuse,,
runtime.go.metrics.memory_classes_metadata_mspan_free.bytes,gauge,,byte,,"Memory that is reserved for runtime mspan structures, but not in-use.",0,go-runtime-metrics-v2,memory metadata mspan free,,
runtime.go.metrics.memory_classes_metadata_mspan_inuse.bytes,gauge,,byte,,Memory that is occupied by runtime mspan structures that are currently being used.,0,go-runtime-metrics-v2,memory metadata mspan inuse,,
runtime.go.metrics.memory_classes_metadata_other.bytes,gauge,,byte,,Memory that is reserved for or used to hold runtime metadata.,0,go-runtime-metrics-v2,memory metadata other,,
runtime.go.metrics.memory_classes_os_stacks.bytes,gauge,,byte,,"Stack memory allocated by the underlying operating system. For more information, see: https://pkg.go.dev/runtime/metrics.",0,go-runtime-metrics-v2,memory os stacks,,
runtime.go.metrics.memory_classes_other.bytes,gauge,,byte,,"Memory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.",0,go-runtime-metrics-v2,memory other,,
runtime.go.metrics.memory_classes_profiling_buckets.bytes,gauge,,byte,,Memory that is used by the stack trace hash map used for profiling.,0,go-runtime-metrics-v2,memory profiling buckets,,
runtime.go.metrics.memory_classes_total.bytes,gauge,,byte,,All memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.,0,go-runtime-metrics-v2,memory total,,
runtime.go.metrics.sched_gomaxprocs.threads,gauge,,thread,,"The current runtime.GOMAXPROCS setting, or the number of operating system threads that can execute user-level Go code simultaneously.",0,go-runtime-metrics-v2,sched gomaxprocs,,
runtime.go.metrics.sched_goroutines.goroutines,gauge,,,,Count of live goroutines.,0,go-runtime-metrics-v2,sched goroutines,,
runtime.go.metrics.sched_latencies.seconds,distribution,,second,,Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,sched latencies,,
runtime.go.metrics.sched_latencies.seconds.avg,gauge,,second,,(Average) Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,avg sched latencies,,
runtime.go.metrics.sched_latencies.seconds.max,gauge,,second,,(Maximum) Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,max sched latencies,,
runtime.go.metrics.sched_latencies.seconds.median,gauge,,second,,(Median) Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,median sched latencies,,
runtime.go.metrics.sched_latencies.seconds.min,gauge,,second,,(Minimum) Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,min sched latencies,,
runtime.go.metrics.sched_latencies.seconds.p95,gauge,,second,,(95th percentile) Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,p95 sched latencies,,
runtime.go.metrics.sched_latencies.seconds.p99,gauge,,second,,(99th percentile) Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,p99 sched latencies,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds,distribution,,second,,"Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds.avg,gauge,,second,,"(Average) Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,avg sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds.max,gauge,,second,,"(Maximum) Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,max sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds.median,gauge,,second,,"(Median) Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,median sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds.min,gauge,,second,,"(Minimum) Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,min sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds.p95,gauge,,second,,"(95th percentile) Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,p95 sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_gc.seconds.p99,gauge,,second,,"(99th percentile) Distribution of individual GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total GC-related stop-the-world time (/sched/pauses/total/gc:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,p99 sched pauses stopping gc,,
runtime.go.metrics.sched_pauses_stopping_other.seconds,distribution,,second,,"Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,sched pauses stopping other,,
runtime.go.metrics.sched_pauses_stopping_other.seconds.avg,gauge,,second,,"(Average) Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,avg sched pauses stopping other,,
runtime.go.metrics.sched_pauses_stopping_other.seconds.max,gauge,,second,,"(Maximum) Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,max sched pauses stopping other,,
runtime.go.metrics.sched_pauses_stopping_other.seconds.median,gauge,,second,,"(Median) Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,median sched pauses stopping other,,
runtime.go.metrics.sched_pauses_stopping_other.seconds.min,gauge,,second,,"(Minimum) Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,min sched pauses stopping other,,
runtime.go.metrics.sched_pauses_stopping_other.seconds.p95,gauge,,second,,"(95th percentile) Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,p95 sched pauses stopping other,,
runtime.go.metrics.sched_pauses_stopping_other.seconds.p99,gauge,,second,,"(99th percentile) Distribution of individual non-GC-related stop-the-world stopping latencies. This is the time it takes from deciding to stop the world until all Ps are stopped. This is a subset of the total non-GC-related stop-the-world time (/sched/pauses/total/other:seconds). During this time, some threads may be executing. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,p99 sched pauses stopping other,,
runtime.go.metrics.sched_pauses_total_gc.seconds,distribution,,second,,"Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_gc.seconds.avg,gauge,,second,,"(Average) Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,avg sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_gc.seconds.max,gauge,,second,,"(Maximum) Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,max sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_gc.seconds.median,gauge,,second,,"(Median) Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,median sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_gc.seconds.min,gauge,,second,,"(Minimum) Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,min sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_gc.seconds.p95,gauge,,second,,"(95th percentile) Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,p95 sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_gc.seconds.p99,gauge,,second,,"(99th percentile) Distribution of individual GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (this is measured directly in runtime.go.metrics.sched_pauses_stopping_gc.seconds), during which some threads may still be running. Bucket counts increase monotonically.",-1,go-runtime-metrics-v2,p99 sched pauses total gc,,
runtime.go.metrics.sched_pauses_total_other.seconds,distribution,,second,,Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,sched pauses total other,,
runtime.go.metrics.sched_pauses_total_other.seconds.avg,gauge,,second,,(Average) Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,avg sched pauses total other,,
runtime.go.metrics.sched_pauses_total_other.seconds.max,gauge,,second,,(Maximum) Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,max sched pauses total other,,
runtime.go.metrics.sched_pauses_total_other.seconds.median,gauge,,second,,(Median) Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,median sched pauses total other,,
runtime.go.metrics.sched_pauses_total_other.seconds.min,gauge,,second,,(Minimum) Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,min sched pauses total other,,
runtime.go.metrics.sched_pauses_total_other.seconds.p95,gauge,,second,,(95th percentile) Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,p95 sched pauses total other,,
runtime.go.metrics.sched_pauses_total_other.seconds.p99,gauge,,second,,(99th percentile) Distribution of individual non-GC-related stop-the-world pause latencies. This is the time from deciding to stop the world until the world is started again. Some of this time is spent getting all threads to stop (measured directly in runtime.go.metrics.sched_pauses_stopping_other.seconds). Bucket counts increase monotonically.,-1,go-runtime-metrics-v2,p99 sched pauses total other,,
runtime.go.metrics.skipped_values,count,,,,Count of metric values skipped due to invalid data,-1,go-runtime-metrics-v2,skipped_values,,
runtime.go.metrics.sync_mutex_wait_total.seconds,gauge,,second,,"Approximate cumulative time goroutines have spent blocked on a sync.Mutex, sync.RWMutex, or runtime-internal lock. This metric is useful for identifying global changes in lock contention. Collect a mutex or block profile using the runtime/pprof package for more detailed contention data.",0,go-runtime-metrics-v2,sync mutex wait total,,
